Given non-negative integers , where each represents a point at coordinate . vertical lines are drawn such that the two endpoints of the line is at and . Find two lines, which, together with the x-axis forms a container, such that the container contains the most water.na1, a2, ..., an (i, ai)ni(i, ai)(i, 0)

Notice that you may not slant the container.

 

Example 1:


Input: height = [1,8,6,2,5,4,8,3,7]
Output: 49
Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.
Example 2:

Input: height = [1,1]
Output: 1
Example 3:

Input: height = [4,3,2,1,4]
Output: 16
Example 4:

Input: height = [1,2,1]
Output: 2
 

Constraints:

n == height.length
2 <= n <= 3 * 104
0 <= height[i] <= 3 * 104


class Solution {
    public int maxArea(int[] height) {
        int max = 0;
        int chang = 0,width = 0;
        for(int i = 0;i < height.length-1;i++)
        {
            for(int j = i+1;j < height.length;j++)
            {
                if(height[i] < height[j])
                    chang = height[i];
                else
                    chang = height[j];
                width = j - i;
                if(max<chang*width)
                    max = chang*width;
            }
        }
        return max;
    }
}
